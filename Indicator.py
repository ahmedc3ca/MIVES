# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\33621\Documents\Romain\Cours_EPFL\Semestre_3\How_people_learn_2\Code\Indicators_dialog_box.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from Indicator_function import *

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 301)
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(50, 270, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.main_graphic = QtWidgets.QGraphicsView(Dialog)
        self.main_graphic.setGeometry(QtCore.QRect(190, 20, 201, 191))
        self.main_graphic.setObjectName("main_graphic")
        self.sub_graphic_1 = QtWidgets.QGraphicsView(Dialog)
        self.sub_graphic_1.setGeometry(QtCore.QRect(110, 10, 71, 51))
        self.sub_graphic_1.setObjectName("sub_graphic_1")

        # Display the linear plot in the subgraphic 1
        grview = QtWidgets.QGraphicsView(self.sub_graphic_1)
        scene = QtWidgets.QGraphicsScene(self.sub_graphic_1)
        image = QPixmap("LinearPlot.png")

        # Set it at the scale of the image to fit the window
        width = self.sub_graphic_1.width()
        height = self.sub_graphic_1.height()
        resized_image = image.scaled(width,height,QtCore.Qt.KeepAspectRatio) # To scale automaticall
        resized_image_1 = image.scaledToWidth(width) # To scale to the witdth of the window
        resized_image_2 = image.scaledToHeight(height) #To scale to the height of the window


        scene.addPixmap(resized_image)
        grview.setScene(scene)
        grview.show()


        self.sub_graphic_2 = QtWidgets.QGraphicsView(Dialog)
        self.sub_graphic_2.setGeometry(QtCore.QRect(110, 90, 71, 51))
        self.sub_graphic_2.setObjectName("sub_graphic_2")

         # Display the linear plot in the subgraphic 2
        grview = QtWidgets.QGraphicsView(self.sub_graphic_2)
        scene = QtWidgets.QGraphicsScene(self.sub_graphic_2)
        image = QPixmap("ConvexPlot.png")

        # Set it at the scale of the image to fit the window
        width = self.sub_graphic_2.width()
        height = self.sub_graphic_2.height()
        resized_image = image.scaled(width,height,QtCore.Qt.KeepAspectRatio) # To scale automaticall
        resized_image_1 = image.scaledToWidth(width) # To scale to the witdth of the window
        resized_image_2 = image.scaledToHeight(height) #To scale to the height of the window


        scene.addPixmap(resized_image)
        grview.setScene(scene)
        grview.show()

        self.sub_graphic_3 = QtWidgets.QGraphicsView(Dialog)
        self.sub_graphic_3.setGeometry(QtCore.QRect(110, 170, 71, 51))
        self.sub_graphic_3.setObjectName("sub_graphic_3")

        # Display the linear plot in the subgraphic 3
        grview = QtWidgets.QGraphicsView(self.sub_graphic_3)
        scene = QtWidgets.QGraphicsScene(self.sub_graphic_3)
        image = QPixmap("ConcavePlot.png")

        # Set it at the scale of the image to fit the window
        width = self.sub_graphic_2.width()
        height = self.sub_graphic_2.height()
        resized_image = image.scaled(width,height,QtCore.Qt.KeepAspectRatio) # To scale automaticall
        resized_image_1 = image.scaledToWidth(width) # To scale to the witdth of the window
        resized_image_2 = image.scaledToHeight(height) #To scale to the height of the window


        scene.addPixmap(resized_image)
        grview.setScene(scene)
        grview.show()



        self.sub_graph_1_button = QtWidgets.QPushButton(Dialog)
        self.sub_graph_1_button.setGeometry(QtCore.QRect(120, 60, 56, 17))
        self.sub_graph_1_button.setObjectName("sub_graph_1_button")
        self.sub_graph_2_button = QtWidgets.QPushButton(Dialog)
        self.sub_graph_2_button.setGeometry(QtCore.QRect(120, 140, 56, 17))
        self.sub_graph_2_button.setObjectName("sub_graph_2_button")
        self.sub_graph_3_button = QtWidgets.QPushButton(Dialog)
        self.sub_graph_3_button.setGeometry(QtCore.QRect(120, 220, 56, 17))
        self.sub_graph_3_button.setObjectName("sub_graph_3_button")
        self.min_value_input = QtWidgets.QLineEdit(Dialog)
        self.min_value_input.setGeometry(QtCore.QRect(20, 50, 51, 16))
        self.min_value_input.setText("0")
        self.min_value_input.setObjectName("min_value_input")
        self.max_value_input = QtWidgets.QLineEdit(Dialog)
        self.max_value_input.setGeometry(QtCore.QRect(20, 100, 51, 16))
        self.max_value_input.setText("10")
        self.max_value_input.setObjectName("max_value_input")
        self.units_input = QtWidgets.QLineEdit(Dialog)
        self.units_input.setGeometry(QtCore.QRect(20, 150, 51, 16))
        self.units_input.setText("")
        self.units_input.setObjectName("units_input")
        self.binary_checkbox = QtWidgets.QCheckBox(Dialog)
        self.binary_checkbox.setGeometry(QtCore.QRect(20, 200, 53, 14))
        self.binary_checkbox.setObjectName("binary_checkbox")
        self.min_value_label = QtWidgets.QLabel(Dialog)
        self.min_value_label.setGeometry(QtCore.QRect(20, 30, 41, 16))
        self.min_value_label.setObjectName("min_value_label")
        self.max_value_label = QtWidgets.QLabel(Dialog)
        self.max_value_label.setGeometry(QtCore.QRect(20, 80, 41, 16))
        self.max_value_label.setObjectName("max_value_label")
        self.units_label = QtWidgets.QLabel(Dialog)
        self.units_label.setGeometry(QtCore.QRect(20, 130, 41, 16))
        self.units_label.setObjectName("units_label")
        self.parameters_label = QtWidgets.QLabel(Dialog)
        self.parameters_label.setGeometry(QtCore.QRect(200, 220, 121, 16))
        self.parameters_label.setObjectName("parameters_label")
        self.parameter_1_input = QtWidgets.QLineEdit(Dialog)
        self.parameter_1_input.setGeometry(QtCore.QRect(200, 240, 51, 16))
        self.parameter_1_input.setText("1")
        self.parameter_1_input.setObjectName("parameter_1_input")
        self.parameter_2_input = QtWidgets.QLineEdit(Dialog)
        self.parameter_2_input.setGeometry(QtCore.QRect(270, 240, 51, 16))
        self.parameter_2_input.setText("0")
        self.parameter_2_input.setObjectName("parameter_2_input")
        self.parameter_3_input = QtWidgets.QLineEdit(Dialog)
        self.parameter_3_input.setGeometry(QtCore.QRect(340, 240, 51, 16))
        self.parameter_3_input.setText("1")
        self.parameter_3_input.setObjectName("parameter_3_input")
        self.main_graph_label = QtWidgets.QLabel(Dialog)
        self.main_graph_label.setGeometry(QtCore.QRect(190, 0, 121, 16))
        self.main_graph_label.setObjectName("main_graph_label")

        # BUTTONS

        self.sub_graph_1_button.clicked.connect(self.linear_button_clicked)
        self.sub_graph_2_button.clicked.connect(self.concave_button_clicked)
        self.sub_graph_3_button.clicked.connect(self.convex_button_clicked)

        self.buttonBox.accepted.connect(self.OK)
        #self.buttonBox.accepted.connect(Dialog.accept)
        self.buttonBox.rejected.connect(Dialog.reject)


        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)



    def linear_button_clicked(self):
        x_min = float(self.min_value_input.text())
        x_max = float(self.max_value_input.text())
        plot_linear_function(x_min,x_max)

        # Display the plot
        grview = QtWidgets.QGraphicsView(self.main_graphic)
        scene = QtWidgets.QGraphicsScene(self.main_graphic)
        image = QPixmap("Plot.png")

        # Set it at the scale of the image to fit the window
        width = self.main_graphic.width()
        height = self.main_graphic.height()
        resized_image = image.scaled(width,height,QtCore.Qt.KeepAspectRatio) # To scale automaticall
        resized_image_1 = image.scaledToWidth(width) # To scale to the witdth of the window
        resized_image_2 = image.scaledToHeight(height) #To scale to the height of the window


        scene.addPixmap(resized_image)
        grview.setScene(scene)
        grview.show()

    def concave_button_clicked(self):
        x_min = float(self.min_value_input.text())
        x_max = float(self.max_value_input.text())
        plot_concave_function(x_min,x_max)

        # Display the plot
        grview = QtWidgets.QGraphicsView(self.main_graphic)
        scene = QtWidgets.QGraphicsScene(self.main_graphic)
        image = QPixmap("Plot.png")

        # Set it at the scale of the image to fit the window
        width = self.main_graphic.width()
        height = self.main_graphic.height()
        resized_image = image.scaled(width,height,QtCore.Qt.KeepAspectRatio) # To scale automaticall
        resized_image_1 = image.scaledToWidth(width) # To scale to the witdth of the window
        resized_image_2 = image.scaledToHeight(height) #To scale to the height of the window


        scene.addPixmap(resized_image)
        grview.setScene(scene)
        grview.show()

    def convex_button_clicked(self):
        x_min = float(self.min_value_input.text())
        x_max = float(self.max_value_input.text())
        plot_convex_function(x_min,x_max)

        # Display the plot
        grview = QtWidgets.QGraphicsView(self.main_graphic)
        scene = QtWidgets.QGraphicsScene(self.main_graphic)
        image = QPixmap("Plot.png")

        # Set it at the scale of the image to fit the window
        width = self.main_graphic.width()
        height = self.main_graphic.height()
        resized_image = image.scaled(width,height,QtCore.Qt.KeepAspectRatio) # To scale automaticall
        resized_image_1 = image.scaledToWidth(width) # To scale to the witdth of the window
        resized_image_2 = image.scaledToHeight(height) #To scale to the height of the window


        scene.addPixmap(resized_image)
        grview.setScene(scene)
        grview.show()


    def OK(self):
        # Get user input values for the plot
        x_min = float(self.min_value_input.text())
        x_max = float(self.max_value_input.text())
        inflection_point_coord = [float(self.parameter_1_input.text()), float(self.parameter_2_input.text())]
        P = float(self.parameter_3_input.text())

        # Create the plot function
        plot_function(P, inflection_point_coord, x_min,x_max)

        # Display the plot
        grview = QtWidgets.QGraphicsView(self.main_graphic)
        scene = QtWidgets.QGraphicsScene(self.main_graphic)
        image = QPixmap("Plot.png")

        # Set it at the scale of the image to fit the window
        width = self.main_graphic.width()
        height = self.main_graphic.height()
        resized_image = image.scaled(width,height,QtCore.Qt.KeepAspectRatio) # To scale automaticall
        resized_image_1 = image.scaledToWidth(width) # To scale to the witdth of the window
        resized_image_2 = image.scaledToHeight(height) #To scale to the height of the window


        scene.addPixmap(resized_image)
        grview.setScene(scene)
        grview.show()


    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.sub_graph_1_button.setText(_translate("Dialog", "PushButton"))
        self.sub_graph_2_button.setText(_translate("Dialog", "PushButton"))
        self.sub_graph_3_button.setText(_translate("Dialog", "PushButton"))
        self.binary_checkbox.setText(_translate("Dialog", "Binary "))
        self.min_value_label.setText(_translate("Dialog", "Min. Value"))
        self.max_value_label.setText(_translate("Dialog", "Max. Value"))
        self.units_label.setText(_translate("Dialog", "Units"))
        self.parameters_label.setText(_translate("Dialog", "Geometrical parameters"))
        self.main_graph_label.setText(_translate("Dialog", "Indicator function"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())

    #self.min_value_input = QtWidgets.QLineEdit(Dialog)
    #self.min_value_input.setGeometry(QtCore.QRect(20, 50, 51, 16))

